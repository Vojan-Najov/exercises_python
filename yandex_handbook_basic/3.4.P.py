# Расклад таков...
# Ограничение времени
# 1 с
# Ограничение памяти
# 64.0 Мб
# Ввод
# стандартный ввод или input.txt
# Вывод
# стандартный вывод или output.txt
# Виталий любит играть в карты. Он решил выяснить, какие есть вариации вытащить
# из колоды определённые тройки карт. Напишите программу, которая выводит
# список вариантов согласно требованиям.
# Формат ввода
# В первой строке записана масть, которая должна присутствовать в тройке.
# Во второй строке записан достоинство, которого не должно быть в тройке.
# Формат вывода
# Выведите на экран первые 10 получившихся троек.
# Карты в каждой комбинации должны быть отсортированы лексикографически (по
# строке названия карты). Карты комбинации выводятся через запятую с пробелом
# после неё.
# Комбинации между собой также должны быть отсортированы в лексикографическом
# порядке по строке, представляющей комбинацию целиком.
# Примечание
# Обратите внимание: валет-дама-король-туз лексикографически упорядочены.
# Но «10 ...» лексикографически младше, чем «2 ...», а бубны младше, чем пики.
# Масти в именительном и родительном падежах:
# Именительный 	Родительный
# буби          бубен
# пики          пик
# трефы         треф
# черви         червей
# Пример 1
# Ввод
# пики
# 10
# Вывод
# 2 бубен, 2 пик, 2 треф
# 2 бубен, 2 пик, 2 червей
# 2 бубен, 2 пик, 3 бубен
# 2 бубен, 2 пик, 3 пик
# 2 бубен, 2 пик, 3 треф
# 2 бубен, 2 пик, 3 червей
# 2 бубен, 2 пик, 4 бубен
# 2 бубен, 2 пик, 4 пик
# 2 бубен, 2 пик, 4 треф
# 2 бубен, 2 пик, 4 червей
# Пример 2
# Ввод
# трефы
# король
# Вывод
# 10 бубен, 10 пик, 10 треф
# 10 бубен, 10 пик, 2 треф
# 10 бубен, 10 пик, 3 треф
# 10 бубен, 10 пик, 4 треф
# 10 бубен, 10 пик, 5 треф
# 10 бубен, 10 пик, 6 треф
# 10 бубен, 10 пик, 7 треф
# 10 бубен, 10 пик, 8 треф
# 10 бубен, 10 пик, 9 треф
# 10 бубен, 10 пик, валет треф

from itertools import product, combinations, islice

nominals = sorted(("2", "3", "4", "5", "6", "7", "8", "9", "10",
                  "валет", "дама", "король", "туз"))

masts = {"буби": "бубен",
         "пики": "пик",
         "трефы": "треф",
         "черви": "червей",
         }

in_mast, out_nominal = input(), input()

it = product(nominals, masts.values())
it = filter(lambda x: x[0] != out_nominal, it)
it = combinations(it, 3)
it = filter(lambda x: masts[in_mast] in (x[0][1], x[1][1], x[2][1]), it)
it = islice(it, 0, 10)
for x in it:
    for i in range(len(x)):
        print(" ".join(x[i]), end=", " if i < len(x) - 1 else "\n")


#for x in islice(filter(lambda x: in_mast in (x[0][1], x[1][1], x[2][1]), combinations(filter(lambda x: x[0] != masts[out_nominal], product(nominals, masts.values())), 3)), 0, 10):
 #   print(x)
