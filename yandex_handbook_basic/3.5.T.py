# Файловая сумма
# Ограничение времени
# 1 с
# Ограничение памяти
# 64.0 Мб
# Ввод
# стандартный ввод
# Вывод
# стандартный вывод
# Вы скорее всего знаете, что существуют не только текстовые файлы. Различные
# форматы данных предусматривают специальное кодирование. Например, BMP
# изображения хранят некоторую заголовочную информацию и цвета всех пикселей в
# виде чисел.
# Давайте поработаем с такими данными. Нам дают файл в некотором формате,
# назовем его NUM. Он содержит список 2-байтных чисел. Для простоты будем
# считать, что отрицательных чисел не существует.
# Напишите программу, которая вычисляет сумму всех записанных в файле чисел в
# 2-байтном диапазоне.
# Формат ввода
# В файле numbers.num содержатся числа в указанном формате.
# Формат вывода
# Одно число — сумма всех чисел в файле на 2-байтном диапазоне.
# Примечание
# Для простоты файлы в примерах записаны в HEX формате. В этом виде файл
# представляется как последовательность четырехзначных шестнадцатеричных чисел.
# В первом примере записано 5 шестнадцатеричных чисел: 1, 2, 3, 4, 5. Их сумма
# равна 15.
# Во втором — 255 и 257. Их сумма равна 512.
# Файл из примеров в изначальном виде можно загрузить здесь:
#     Первый пример
#     Второй пример
# Если вы хотите изучить принцип хранения целых чисел в ЭВМ, советуем почитать
# про прямой, обратный и дополнительный коды.
# \samples
# Пример 1
# Ввод
# 0001 0002 0003 0004 0005
# Вывод
# 15
# Пример 2
# Ввод
# 00FF 0101
# Вывод
# 512

acc = 0
with open('numbers.num', 'rb') as file:
    while b := file.read(2):
        acc += b[0] * 256 + b[1]

print(acc % 2 ** 16)
