# Двоичная статистика!
# У программистов особые отношения с двоичной системой счисления.
# Продолжим тренировки в статистической обработке данных и проанализируем
# данные числа.
# Напишите программу, которая для переданных чисел вычисляет:
#     количество разрядов;
#     количество единиц;
#     количество нулей.
# Формат ввода
# Вводится последовательность чисел, записанных через пробел.
# Формат вывода
# Вывести список словарей с требуемой статистикой.
# Примечание
# Вывод в примерах отформатирован только для визуальной наглядности.
# Все пробельные символы при проверке игнорируются.
# Порядок словарей обязан совпадать с порядком переданных чисел.
# Порядок ключей в словаре не имеет значения.
# Пример 1
# Ввод
# 5 8 12
# Вывод
# [
#     {
#         "digits": 3,
#         "units": 2,
#         "zeros": 1
#     },
#     {
#         "digits": 4,
#         "units": 1,
#         "zeros": 3
#     },
#     {
#         "digits": 4,
#         "units": 2,
#         "zeros": 2
#     }
# ]
# Пример 2
# Ввод
# 13 2 7
# Вывод
# [
#     {
#         "digits": 4,
#         "units": 3,
#         "zeros": 1
#     },
#     {
#         "digits": 2,
#         "units": 1,
#         "zeros": 1
#     },
#     {
#         "digits": 3,
#         "units": 3,
#         "zeros": 0
#     }
# ]
# Ограничение памяти
# 64.0 Мб
# Ограничение времени
# 1 с
# Ввод
# стандартный ввод или input.txt
# Вывод
# стандартный вывод или output.txt

import json

lst = []
for num in map(int, input().split()):
    digits, units, zeros = int(), int(), int()
    while num:
        digit = num % 2
        num //= 2
        digits += 1
        if digit:
            units += 1
        else:
            zeros += 1
    lst.append({"digits": digits, "units": units, "zeros": zeros}) 

print(json.dumps(lst, indent=4, sort_keys=True))
