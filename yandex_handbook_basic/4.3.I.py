# Циклический генератор
# Ограничение времени
# 1 с
# Ограничение памяти
# 64.0 Мб
# Ввод
# стандартный ввод
# Вывод
# стандартный вывод
# Напишите генератор cycle, который принимает список и работает аналогично
# итератору itertools.cycle.
# Примечание
# Ваше решение должно содержать только функции.
# В решении не должно быть вызовов требуемых функций.
# Пример 1
# Ввод
# print(*(x for _, x in zip(range(5), cycle([1, 2, 3]))))
# Вывод
# 1 2 3 1 2
# Пример 2
# Ввод
# print(*(x for _, x in zip(range(15), cycle([1, 2, 3, 4]))))
# Вывод
# 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3

def cycle(alist):
    i = 0
    while True:
        yield alist[i]
        i = (i + 1) % len(alist)


if __name__ == '__main__':
    assert ' '.join(str(x) for _, x in zip(range(5), cycle([1, 2, 3]))) == \
            '1 2 3 1 2'
    assert ' '.join(str(x) for _, x in zip(range(15), cycle([1, 2, 3, 4]))) == \
            '1 2 3 4 1 2 3 4 1 2 3 4 1 2 3'
